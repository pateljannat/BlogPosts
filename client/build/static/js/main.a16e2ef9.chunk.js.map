{"version":3,"sources":["components/navBar.jsx","components/createPosts.jsx","components/listPosts.jsx","components/login.jsx","components/register.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","handleLogout","bind","e","preventDefault","token","JSON","parse","sessionStorage","getItem","axios","get","then","data","success","removeItem","stateChange","isLoggedIn","className","to","src","alt","id","onClick","this","Component","CreatePosts","state","title","post","handleChange","handleSubmit","target","name","value","setState","match","params","catch","error","console","log","payload","email","url","history","push","onSubmit","type","placeholder","onChange","ListPosts","posts","process","baseURL","headers","sort","data1","data2","Date","date","delete","length","displayPosts","map","index","key","displayDate","_id","deletePost","moment","format","Login","password","setItem","stringify","from","SignUp","password1","App","newState","path","exact","component","render","isNew","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a16e2ef9.chunk.js","sourcesContent":["//Navbar cpmponent with a link to home page and a link to create new posts\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport \"../styles/App.css\";\nimport axios from 'axios';\n\nclass NavBar extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.handleLogout = this.handleLogout.bind(this);\n    }\n\n    handleLogout(e) {\n        e.preventDefault();\n\n        let token = JSON.parse(sessionStorage.getItem('key')).token;\n        axios.get(`/api/accounts/logout`, token).then(data => {\n            if (data.data.success === true) {\n                sessionStorage.removeItem('key');\n                sessionStorage.removeItem('isLoggedIn');\n                this.props.stateChange({\n                    isLoggedIn: false\n                });\n            }\n        })\n    }\n \n    render() {\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-sm navbar-light bg-light\">\n                    <Link to=\"/\" className=\"navbar-brand\">\n                        <img src=\"./WebNote.png\" className=\"logo\" alt=\"Logo\"></img>\n                    </Link>\n\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <Link to=\"/create\" className=\"nav-link\">Create</Link>\n                            </li>\n                            <li className=\"nav-item logout-link\">\n                                <span className=\"nav-link link-span\" onClick={this.handleLogout}>Logout</span>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;","//Component to display a form for creating new notes\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass CreatePosts extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            title: '',\n            post: '',\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //hadles change on form input elements\n    handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    componentDidMount() {\n        if (!this.props.match.params.id) return\n        axios.get(`/api/${this.props.match.params.id}`).then(post => {\n            this.setState({\n                'title': post.data.title,\n                'post': post.data.post\n            })\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    //handles submission of the form\n    handleSubmit(e) {\n        e.preventDefault()\n        const payload = {\n            'title': this.state.title,\n            'post': this.state.post,\n            'user': JSON.parse(sessionStorage.getItem('key')).email\n        }\n        const url = this.props.match.params.id ? `/api/${this.props.match.params.id}` : '/api/add';\n        axios.post(url, payload).then(data => {\n            this.props.history.push('/');\n        })\n    }\n\n    render() {\n        return (\n            <form className=\"form-style mt-4\" onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Title\" name=\"title\" value={this.state.title} onChange={this.handleChange} />\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Note Content\" name=\"post\" value={this.state.post} onChange={this.handleChange} />\n                </div>\n                <button className=\"btn btn-primary\" type=\"submit\" >Submit</button>\n            </form>\n        );\n    }\n}\n\nexport default CreatePosts;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nclass ListPosts extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts: []\n        }\n    }\n\n    componentDidMount() {\n        console.log(process.env.baseURL)\n        axios.get('/api', {\n            params: {\n                email: JSON.parse(sessionStorage.getItem('key')).email\n            },\n            headers: { 'Content-Type': 'application/json' }\n        }).then(posts => {\n            var data = posts.data.sort((data1, data2) => new Date(data2.date) - new Date(data1.date));\n            this.setState({\n                'posts': data\n            })\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    deletePost(id) {\n        axios.delete(`/api/delete/${id}`, {\n            params: {\n                email: JSON.parse(sessionStorage.getItem('key')).email\n            }\n        }).then(posts => {\n            var data = posts.data.sort((data1, data2) => new Date(data2.date) - new Date(data1.date));\n            this.setState({\n                'posts': data\n            })\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    render() {\n        let { posts } = this.state;\n        if (!posts.length) \n        return (\n            <div className=\"no-notes\">\n                You have no notes yet!!\n            </div>\n        );\n        return (\n            <div>\n                <h3>All Notes</h3>\n                <div>\n                    {this.displayPosts()}\n                </div>\n            </div>\n        );\n    }\n\n    //displays a list of all the notes\n    displayPosts() {\n        let { posts } = this.state;\n        if (!posts.length) return null;\n        return posts.map((post, index) => {\n            return (\n                <div key={index} className=\"list-group-item\">\n                    <div className=\"d-flex w-100 justify-content-between\">\n                    <h5 className=\"mb-1\">{post.title}</h5>\n                    <small className=\"text-muted\">{this.displayDate(post.date)}</small>\n                    </div>\n                    <p className=\"mb-1\">{post.post}</p>\n                    <Link className=\"list-group-item-action\" to={\"/edit/\" + post._id}>Edit</Link>\n                    <span className=\"list-group-item-action link-span\" onClick={this.deletePost.bind(this, post._id)}>Delete</span>\n                </div>\n            )\n        })\n    }\n\n    //Formats the date using moment.js library in the format Do MMMM YYYY\n    displayDate(date) {\n        return moment(date).format('Do MMMM YYYY');\n    }\n}\n\nexport default ListPosts;","//component for login form\nimport React, { Component } from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport '../styles/login.css'\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            'email': '',\n            'password': '',\n            'isLoggedIn': sessionStorage.getItem('isLoggedIn')\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //handles change on form input elements \n    handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    //handles submission of login form\n    handleSubmit(e) {\n        e.preventDefault();\n        const payload = {\n            email: this.state.email,\n            password: this.state.password\n        }\n        axios.post(`/api/accounts/login`, payload).then(data => {\n            if (data.data.success === true) {\n                const token = {\n                    'token': data.data.token,\n                    'email': data.data.email\n                }\n                sessionStorage.setItem('key', JSON.stringify(token) );\n                sessionStorage.setItem('isLoggedIn', true);\n                this.setState({\n                    isLoggedIn: true\n                });\n                this.props.stateChange({\n                    isLoggedIn: true\n                });\n            }\n        })\n    }\n\n    render() {\n        if (this.state.isLoggedIn) {\n            return <Redirect from=\"/login\" to=\"/\"></Redirect>\n        }\n        else {\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <input className=\"form-control\" type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} placeholder=\"Email Address\"></input>\n                        {/*  <span className=\"validation-error\">{this.state.errors.email}</span> */}\n                    </div>\n                    <div className=\"form-group\">\n                        <input className=\"form-control\" type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} placeholder=\"Password\"></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.password}</span> */}\n                    </div>\n                    <button className=\"btn btn-primary\" type=\"submit\">Log In</button>\n\n                    <div className=\"switch-section-login\">\n                        <div>Dont have an account? </div>\n                        <Link to=\"/register\">Sign Up</Link>\n                    </div>\n                </form>\n            );\n        }\n\n    }\n}\n\nexport default Login;","//component for resgitration form\nimport React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport axios from \"axios\";\nimport \"../styles/login.css\"\n\nclass SignUp extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n            password1: '',\n            isLoggedIn: sessionStorage.getItem('isLoggedIn')\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //handles change on form input elements\n    handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    //handles submission of the regstration form\n    handleSubmit(e) {\n        e.preventDefault();\n        const payload = {\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password,\n            password1: this.state.password1\n        }\n        axios.post(`/api/accounts/register`, payload).then(data => {\n            if (data.data.success === true) {\n                const token = {\n                    'token': data.data.token,\n                    'email': data.data.email\n                }\n\n                //save the token and login flag in session\n                sessionStorage.setItem('key', JSON.stringify(token));\n                sessionStorage.setItem('isLoggedIn', true);\n                this.setState({\n                    isLoggedIn: true\n                });\n                this.props.stateChange({\n                    isLoggedIn: true\n                });\n            }\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    render() {\n        if (this.state.isLoggedIn) {\n            return <Redirect from=\"/login\" to=\"/\"></Redirect>\n        }\n        else {\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <input placeholder=\"Name\" className=\"form-control\" type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange}></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.name}</span> */}\n                    </div>\n                    <div className=\"form-group\">\n                        <input placeholder=\"Email Address\" className=\"form-control\" type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange}></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.email}</span> */}\n                    </div>\n                    <div className=\"form-group\">\n                        <input placeholder=\"Password\" className=\"form-control\" type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.password}</span> */}\n                    </div>\n                    <div className=\"form-group\">\n                        <input placeholder=\"Confirm Password\" className=\"form-control\" type=\"password\" name=\"password1\" value={this.state.password1} onChange={this.handleChange}></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.password1}</span> */}\n                    </div>\n                    <button className=\"btn btn-primary\" type=\"submit\">Sign Up</button>\n\n                    <div className=\"switch-section-register\">\n                        <div>Already have an account. Log in instead!!!</div>\n                        <Link to=\"/login\">Log In</Link>\n                    </div>\n                </form>\n            );\n        }\n    }\n}\n\nexport default SignUp;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./components/navBar\";\nimport CreatePosts from './components/createPosts';\nimport ListPosts from \"./components/listPosts\";\nimport Login from \"./components/login\";\nimport Registration from \"./components/register\";\nimport \"./styles/App.css\";\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: sessionStorage.getItem('isLoggedIn')\n    }\n    this.stateChange = this.stateChange.bind(this);\n  }\n\n  //Based on changes in child component, stateChange function changes the state of this component\n  stateChange(newState) {\n    this.setState(newState)\n  }\n\n  //Checks if the user is loggedIn or not\n  //If the user is not logged in then displays the login component\n  //Else dispays the notes\n  render() {\n    if (!this.state.isLoggedIn) {\n      return (\n        <Router>\n          <div className=\"login-container\">\n          <div  className=\"login-form\">\n            <div className=\"login-heading\">\n              <h2>Webnote</h2>\n              <p>Remember everything important.</p>\n            </div>\n            <Route exact path=\"/register\" render={(props) =>\n              <Registration stateChange={this.stateChange} ></Registration>\n            } />\n            <Route exact path=\"/login\" render={(props) =>\n              <Login stateChange={this.stateChange}></Login>\n            } />\n            <Redirect from=\"/\" to=\"login\" />\n          </div>\n          </div>\n        </Router>\n      )\n    }\n    return (\n      <Router>\n        <div className=\"container\">\n          <NavBar stateChange={this.stateChange}></NavBar>\n        </div>\n        <Route className=\"container\" path=\"/\" exact component={ListPosts} />\n        <Route path=\"/edit/:id\" exact render={(props) => \n        <CreatePosts {...props} isNew={false}></CreatePosts>\n        } />\n        <Route path=\"/create\" exact render={(props) => \n        <CreatePosts {...props} isNew={true}></CreatePosts>\n        } />\n      </Router>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}