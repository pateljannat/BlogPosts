{"version":3,"sources":["components/navBar.jsx","components/createPosts.jsx","components/listPosts.jsx","components/login.jsx","components/register.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","className","to","src","alt","id","Component","CreatePosts","title","post","handleChange","bind","handleSubmit","target","name","value","this","setState","props","match","params","axios","get","then","data","catch","error","console","log","e","preventDefault","payload","JSON","parse","sessionStorage","getItem","email","url","history","push","onSubmit","type","placeholder","onChange","ListPosts","posts","headers","sort","data1","data2","Date","date","displayPosts","length","map","index","key","displayDate","_id","moment","format","Login","password","success","token","setItem","stringify","isLoggedIn","stateChange","from","SignUp","password1","App","newState","path","exact","component","render","isNew","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.da662ece.chunk.js","sourcesContent":["//Navbar cpmponent with a link to home page and a link to create new posts\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport \"../styles/App.css\";\n\nclass NavBar extends Component {\n    state = {}\n    render() {\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                    <Link to=\"/\" className=\"navbar-brand\">\n                        <img src=\"./WebNote.png\" className=\"logo\" alt=\"Logo\"></img>\n                    </Link>\n\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <Link to=\"/create\" className=\"nav-link\">Create Posts</Link>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;","//Component to display a form for creating new notes\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass CreatePosts extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            title: '',\n            post: '',\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //hadles change on form input elements\n    handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    componentDidMount() {\n        if (!this.props.match.params.id) return\n        axios.get(`http://localhost:4000/api/${this.props.match.params.id}`).then(post => {\n            this.setState({\n                'title': post.data.title,\n                'post': post.data.post\n            })\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    //handles submission of the form\n    handleSubmit(e) {\n        e.preventDefault()\n        const payload = {\n            'title': this.state.title,\n            'post': this.state.post,\n            'user': JSON.parse(sessionStorage.getItem('key')).email\n        }\n        const url = this.props.match.params.id ? `http://localhost:4000/api/${this.props.match.params.id}` : 'http://localhost:4000/api/add';\n        axios.post(url, payload).then(data => {\n            this.props.history.push('/');\n        })\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Title\" name=\"title\" value={this.state.title} onChange={this.handleChange} />\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Note Content\" name=\"post\" value={this.state.post} onChange={this.handleChange} />\n                </div>\n                <button className=\"btn btn-primary\" type=\"submit\" >Submit</button>\n            </form>\n        );\n    }\n}\n\nexport default CreatePosts;","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport moment from \"moment\";\n\nclass ListPosts extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            posts: []\n        }\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/api', {\n            params: {\n                email: JSON.parse(sessionStorage.getItem('key')).email\n            },\n            headers: { 'Content-Type': 'application/json' }\n        }).then(posts => {\n            var data = posts.data.sort((data1, data2) => new Date(data2.date) - new Date(data1.date));\n            this.setState({\n                'posts': data\n            })\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>All Notes</h3>\n                <div>\n                    {this.displayPosts()}\n                </div>\n            </div>\n        );\n    }\n\n    //displays a list of all the notes\n    displayPosts() {\n        let { posts } = this.state;\n        if (!posts.length) return null;\n        return posts.map((post, index) => {\n            return (\n                <div key={index} className=\"list-group-item\">\n                    <div className=\"d-flex w-100 justify-content-between\">\n                    <h5 className=\"mb-1\">{post.title}</h5>\n                    <small className=\"text-muted\">{this.displayDate(post.date)}</small>\n                    </div>\n                    <p className=\"mb-1\">{post.post}</p>\n                    <Link className=\"list-group-item-action\" to={\"/edit/\" + post._id}>Edit</Link>\n                </div>\n            )\n        })\n    }\n\n    //Formats the date using moment.js library in the format Do MMMM YYYY\n    displayDate(date) {\n        return moment(date).format('Do MMMM YYYY');\n    }\n}\n\nexport default ListPosts;","//component for login form\nimport React, { Component } from 'react';\nimport { Link, Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport '../styles/login.css'\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            'email': '',\n            'password': '',\n            'isLoggedIn': sessionStorage.getItem('isLoggedIn')\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //handles change on form input elements \n    handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    //handles submission of login form\n    handleSubmit(e) {\n        e.preventDefault();\n        const payload = {\n            email: this.state.email,\n            password: this.state.password\n        }\n        axios.post(`http://localhost:4000/api/accounts/login`, payload).then(data => {\n            if (data.data.success === true) {\n                const token = {\n                    'token': data.data.token,\n                    'email': data.data.email\n                }\n                sessionStorage.setItem('key', JSON.stringify(token) );\n                sessionStorage.setItem('isLoggedIn', true);\n                this.setState({\n                    isLoggedIn: true\n                });\n                this.props.stateChange({\n                    isLoggedIn: true\n                });\n            }\n        })\n    }\n\n    render() {\n        if (this.state.isLoggedIn) {\n            return <Redirect from=\"/login\" to=\"/\"></Redirect>\n        }\n        else {\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <input className=\"form-control\" type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange} placeholder=\"Email Address\"></input>\n                        {/*  <span className=\"validation-error\">{this.state.errors.email}</span> */}\n                    </div>\n                    <div className=\"form-group\">\n                        <input className=\"form-control\" type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} placeholder=\"Password\"></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.password}</span> */}\n                    </div>\n                    <button className=\"btn btn-primary\" type=\"submit\">Log In</button>\n\n                    <div className=\"switch-section-login\">\n                        <div>Dont have an account? </div>\n                        <Link to=\"/register\">Sign Up</Link>\n                    </div>\n                </form>\n            );\n        }\n\n    }\n}\n\nexport default Login;","//component for resgitration form\nimport React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport axios from \"axios\";\nimport \"../styles/login.css\"\n\nclass SignUp extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            password: '',\n            password1: '',\n            isLoggedIn: sessionStorage.getItem('isLoggedIn')\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    //handles change on form input elements\n    handleChange({ target }) {\n        const { name, value } = target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    //handles submission of the regstration form\n    handleSubmit(e) {\n        e.preventDefault();\n        const payload = {\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password,\n            password1: this.state.password1\n        }\n        axios.post(`http://localhost:4000/api/accounts/register`, payload).then(data => {\n            if (data.data.success === true) {\n                const token = {\n                    'token': data.data.token,\n                    'email': data.data.email\n                }\n\n                //save the token and login flag in session\n                sessionStorage.setItem('key', JSON.stringify(token));\n                sessionStorage.setItem('isLoggedIn', true);\n                this.setState({\n                    isLoggedIn: true\n                });\n                this.props.stateChange({\n                    isLoggedIn: true\n                });\n            }\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    render() {\n        if (this.state.isLoggedIn) {\n            return <Redirect from=\"/login\" to=\"/\"></Redirect>\n        }\n        else {\n            return (\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <input placeholder=\"Name\" className=\"form-control\" type=\"text\" name=\"name\" value={this.state.name} onChange={this.handleChange}></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.name}</span> */}\n                    </div>\n                    <div className=\"form-group\">\n                        <input placeholder=\"Email Address\" className=\"form-control\" type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange}></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.email}</span> */}\n                    </div>\n                    <div className=\"form-group\">\n                        <input placeholder=\"Password\" className=\"form-control\" type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.password}</span> */}\n                    </div>\n                    <div className=\"form-group\">\n                        <input placeholder=\"Confirm Password\" className=\"form-control\" type=\"password\" name=\"password1\" value={this.state.password1} onChange={this.handleChange}></input>\n                        {/* <span className=\"validation-error\">{this.state.errors.password1}</span> */}\n                    </div>\n                    <button className=\"btn btn-primary\" type=\"submit\">Sign Up</button>\n\n                    <div className=\"switch-section-register\">\n                        <div>Already have an account. Log in instead!!!</div>\n                        <Link to=\"/login\">Log In</Link>\n                    </div>\n                </form>\n            );\n        }\n    }\n}\n\nexport default SignUp;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport NavBar from \"./components/navBar\";\nimport CreatePosts from './components/createPosts';\nimport ListPosts from \"./components/listPosts\";\nimport Login from \"./components/login\";\nimport Registration from \"./components/register\";\nimport \"./styles/App.css\";\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: sessionStorage.getItem('isLoggedIn')\n    }\n    this.stateChange = this.stateChange.bind(this);\n  }\n\n  //Based on changes in child component, stateChange function changes the state of this component\n  stateChange(newState) {\n    this.setState(newState)\n  }\n\n  //Checks if the user is loggedIn or not\n  //If the user is not logged in then displays the login component\n  //Else dispays the notes\n  render() {\n    if (!this.state.isLoggedIn) {\n      return (\n        <Router>\n          <div className=\"login-container\">\n          <div  className=\"login-form\">\n            <div className=\"login-heading\">\n              <h2>Webnote</h2>\n              <p>Remember everything important.</p>\n            </div>\n            <Route exact path=\"/register\" render={(props) =>\n              <Registration stateChange={this.stateChange} ></Registration>\n            } />\n            <Route exact path=\"/login\" render={(props) =>\n              <Login stateChange={this.stateChange}></Login>\n            } />\n            <Redirect from=\"/\" to=\"login\" />\n          </div>\n          </div>\n        </Router>\n      )\n    }\n    return (\n      <Router>\n        <div className=\"container\">\n          <NavBar></NavBar>\n        </div>\n        <Route className=\"container\" path=\"/\" exact component={ListPosts} />\n        <Route path=\"/edit/:id\" exact render={(props) => \n        <CreatePosts {...props} isNew={false}></CreatePosts>\n        } />\n        <Route path=\"/create\" exact render={(props) => \n        <CreatePosts {...props} isNew={true}></CreatePosts>\n        } />\n      </Router>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}